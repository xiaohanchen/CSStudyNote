
系统构架  Scalability 
https://github.com/shashank88/system_design/blob/master/README.md#myapproach


P1: Stateless
a scalable web service are hidden behind a load balancer

Server does not store any user-related data, like sessions or profile pictures (Stateless), instead, sessions should be stored externally, an external persistent cache will have better performance than an external database

By now, the server could horizontally scale, and could serve lots of concurrent requests 

N.B.
Sessions (maintain the data/conversation between client and server): HTTP protocol and Web Servers are stateless, but sometimes in web applications, we should know who the client is and process the request accordingly. For example, a shopping cart application should know who is sending the request to add an item and in which cart the item has to be added or who is sending checkout request so that it can charge the amount to correct client.


P2: DB
servers slow down due to the MySQL
Path1: master-slave replication (read from slaves, write to master), to spread the load; but eventually => denormalisation  (no  need join to get the results)

Path 2:
denormalize right from the beginning and include no more Joins in any database query. You can stay with MySQL, and use it like a NoSQL database, or you can switch to a better and easier to scale NoSQL(non relational db) database like MongoDB or CouchDB

However, DB R/W is expensive, so we use cache.


P3: Cache
cache database query result
path1: Cached Database Queries
bad if table cel l changed, need to delete cached query which may use that cell

path2: Cached Object:
convert the DB row to object, easy to delete. this conversion could be done asynchronously by worker servers/threads, so eventually servers will only access the cache not DB.     cache tool: Redis/Memcached



P4: Asynchronism
Async1:
Referring to a web app this means doing the time-consuming work in advance and serving the finished work with a low request time.
Prepare in advance and store the result somewhere and waiting to be requested. 

for example: 提前把动态页面渲染好，以静态页面的方式储存在云端，render the dynamic page in advance, store them as the static page on AWS. so that server could be ready for millions of request at a single time.

Async2:
response immediately to user asking them to something else while waiting for the result;

use a queue, send the request into queue. so the server could be infinitely scalable 




SQL: structured query langulange
NoSQL: non structured 

Structured DB: table entry must follow the table structure. e.g. table with fields name & email, you couldnt add the additional information as “birthday”

Non S: collections = table; document = one row; dynamic key&value pairs inside document  to present the content

Mango DB: Non Structured DB
sharing: petition data into subsets 





CS75：
dedicated server: one server responsible for images, the other responsible for documents
redundancy server: horizontal scalable 

sessions: is stored in each server’s memory, to remember different users  behaviours. e.g. shopping carts, when user adds a new item, the server knows how many items already added by the same user before. 
However, sessions doesn’t work if we use load-balancing, because each server has different session for the same user`
Unless, sessions are stored in the external server (file server)
Whatif, the file system dies, non of the server could work….. so we need to replicate them, make them redundancy, using RAID technology

Why you probably shouldn't use cookies to store session data: slow, add 144ms latency ; cookie should only have few KB; server don’t want to expose the its data/config



RAID: redundant array of independent disks
RAID0: add performance, because multiple disks are writing concurrently 
RAID1: add redundancy, in case one is done, 2 disks keeps the same data


Cookie: sent by server in the HTTP response headers, stored in the pc disk;    **** browser send cookie to server again, to reminder what user this is (cookie containing session ID, a big random number), to maintain the session



Cache:

.html:    static content, is itself stored in the server as cache, without rendering for each request/visit

memcache: store data in the RAM (key-value pair)  






